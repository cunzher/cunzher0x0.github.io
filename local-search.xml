<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>自动备份大法</title>
    <link href="//defect/auto-backup.html"/>
    <url>//defect/auto-backup.html</url>
    
    <content type="html"><![CDATA[<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>最近看到几个数据爆炸的可怕事件，虽然我平时偶尔有手动备份的，但还是不怎么放心。以前有用过lsyncd自动同步到其他机器。但昨天发生了一个更可怕的事情，我重启机器后发现mysql启动不了，apt也不能update了。当时就蒙了，后来发现是我的/var目录满了。mysql与apt都需要用到/var目录，所以爆炸了。但是为什么会满呢…</p><p>因为一个lsyncd的日志写了34GB。</p><p><img src="./images/%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD%E5%A4%A7%E6%B3%95/2874899693.png" srcset="/defect/images/img/loading.gif" alt="1.png/"></p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>放弃lsyncd。</p><p>以前因为懒，写过一个自动压缩网页根目录的脚本，配合crontab在每天的凌晨自动执行一遍非常不错。</p><p>但是最重要的不是根目录，而是数据库。最近有了解到mysqldump，表示可以crontab一下。</p><h3 id="dump为sql文件"><a href="#dump为sql文件" class="headerlink" title="dump为sql文件"></a>dump为sql文件</h3><p>导出整个数据库：</p><pre><code>mysqldump -u 用户名 -p 数据库名 &gt; 导出的文件名</code></pre><p>例：</p><pre><code>mysqldump -u root -p typecho &gt; typecho_backup.sql</code></pre><p>导出一个表</p><pre><code>mysqldump -u 用户名 -p 数据库名 表名&gt; 导出的文件名</code></pre><p>例：</p><pre><code>mysqldump -u root -p typecho users &gt; users_backup.sql</code></pre><p>导出一个数据库结构</p><pre><code>mysqldump -u 用户名 -p -d 数据库名 &gt; 导出的文件名</code></pre><p>例：</p><pre><code>mysqldump -u root -p -d typecho &gt;  typecho.sql</code></pre><h3 id="导入数据库"><a href="#导入数据库" class="headerlink" title="导入数据库"></a>导入数据库</h3><pre><code>mysql -u 用户名 -p 数据库名 &lt; 数据库名.sql</code></pre><p>例：</p><pre><code>mysql -u root -p typecho &lt; typecho.sql</code></pre><p>实际操作了一下，确实很简单方便好用。但问题是，对于我这种勤(lan)快的人肯定要脚本自动一体化啊。</p><h3 id="感觉很厉害的Script"><a href="#感觉很厉害的Script" class="headerlink" title="感觉很厉害的Script"></a>感觉很厉害的Script</h3><p>自我感觉，自我感觉。</p><pre><code class="bash">#!/bin/bash#定义数据库信息USER=&quot;root&quot;PASS=&quot;password&quot;HOST=&quot;localhost&quot;NAME=&quot;typecho&quot;NAME2=&quot;wordpress&quot;#其他信息BAK_DIR=&quot;/root/backup/&quot;TIME=`date +%F`#操作mysqldump -u$USER -p$PASS -h$HOST $NAME &gt; $NAME&quot;_&quot;$TIME.sqlmysqldump -u$USER -p$PASS -h$HOST $NAME2 &gt; $NAME2&quot;_&quot;$TIME.sql#压缩并移动#tar -zPcvf /root/backup/tar.gz/sql/$NAME&quot;_&quot;$TIME.tar.gz /root/backup/$NAME&quot;_&quot;$TIME.sql#tar -zPcvf /root/backup/tar.gz/sql/$NAME2&quot;_&quot;$TIME.tar.gz /root/backup/$NAME2&quot;_&quot;$TIME.sql#删除多余文件rm -rf /root/backup/$NAME&quot;_&quot;$TIME.sql /root/backup/$NAME2&quot;_&quot;$TIME.sqlrm -rf /root/$NAME&quot;_&quot;$TIME.sql /root/$NAME2&quot;_&quot;$TIME.sql#删除三天前的数据find /root/backup/tar.gz/sql -mtime +3 -name &quot;*.*&quot; -exec rm -rf {} \;</code></pre><p>只要将其放到crontab中，并按时间进行执行。就能实现完美的sql备份了。</p><p>再加上以前写过的一些备份其他文件的Shell Script，就能实现最基本的收据备份了。并且七牛的云储存有个在Linux上的下载备份脚本。正好给了我不小的帮助。</p><p>（虽然喜欢写交互式的脚本，但是只要将命令挑出来放crontab就好了）</p><h3 id="写入crontab"><a href="#写入crontab" class="headerlink" title="写入crontab"></a>写入crontab</h3><p>先来简单的介绍下可爱的crontab文件的时间格式吧。</p><p><img src="./images/%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD%E5%A4%A7%E6%B3%95/4160640759.png" srcset="/defect/images/img/loading.gif" alt="2.png/"></p><p>星号（*）：代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。</p><p>逗号（,）：可以用逗号隔开的值指定一个列表范围，例如，“1,2,5,7,8,9”</p><p>中杠（-）：可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6”</p><p>正斜线（/）：可以用正斜线指定时间的间隔频率，例如“0-23/2”表示每两小时执行一次。同时正斜线可以和星号一起使用，例如*/10，如果用在minute字段，表示每十分钟执行一次。</p><p>然后就是写到Crontab里去了。第一次我也是以为直接找到并编辑crontab这个文件的，后来才发现，原来人家有编辑的命令的：</p><pre><code>crontab -e</code></pre><p>然后按照格式讲我们的脚本写进去就好了。</p><pre><code># m h  dom mon dow   comman0 5 * * * /bin/sh /root/backup/c.sh0 4 * * * /bin/sh /root/backup/d.sh</code></pre><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>进过超级简单的操作再配合定时任务，就能实现自动化的各种各样的操作了。对于备份这种操作，手动来做的话迟早会累死，就是不累也会感觉到烦。所以将其运用到定时任务上就是非常的人性化了。主要是方便，不需要任何的人工参与。</p><p>对于数据这方面的，还是经常性的备份比较重要。不光光是不本机的备份，也要经常性的实施多机备份。</p>]]></content>
    
    
    <categories>
      
      <category>实践</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Minecraft bedrock服务端🥂</title>
    <link href="//defect/minecraft-bedrock-server.html"/>
    <url>//defect/minecraft-bedrock-server.html</url>
    
    <content type="html"><![CDATA[<h2 id="Minecraft"><a href="#Minecraft" class="headerlink" title="Minecraft"></a>Minecraft</h2><p><strong>MINECRAFT 是什么？</strong></p><blockquote><p><strong>这是一个有关放置方块与探险的游戏。</strong><br>游戏设定在一片可以无限生成的世界里，这里有广袤而开阔的土地——由冰雪覆盖的山峰、潮湿的河口、辽阔的牧场等等组成——它们充满着奥秘、奇迹与危险。</p></blockquote><p>这个游戏应该是多数玩家都已不陌生，开发商为Mojang AB（Mojäng Aktiebolag），是瑞典的一家电子游戏开发商。他家也发行过其他的小游戏，但是名声都不怎么样。最后Minecraft一炮走红。2014年9月，财大气粗的软软以25亿美元收购Mojang以及游戏的知识产权。</p><p>最早的时候我们在PC上接触的应该都是开发商的Java版本，Java版本的好处就是它有各种各样的Mod，以及材质包等。对于玩家来说使用也非常的方便。虽然性能不是那么的卓越，但是现在依然是很受玩家的欢迎了。</p><p>在被微软收购以后，微软结合自家的Win10应用商店也出了一个Bedrock版本，与其不同的是，这次使用C语言写出来的。在自家的应用商店内，玩家们安装也变的更加的方便了。除此之外，性能方面肯定是要比Java好的多的。</p><h2 id="Bedrock-Server"><a href="#Bedrock-Server" class="headerlink" title="Bedrock Server"></a>Bedrock Server</h2><p>相比较以前的Java版本自建服务器来说，Bedrock版本的Server要比以前方便简单的多。虽然目前还处于Bate版本，但是支持的功能也比较完善了。</p><p>主要是简单的多，对于以前的Java，服务端搭建起来非常的麻烦，得力于Java，还非常吃服务器的资源。目前已经编译好的C语言来说，不仅省了很多事，还降低了对服务器的要求。当然，唯一一个缺点就是跨平台肯定没有Java方便了。</p><h2 id="搭建服务端"><a href="#搭建服务端" class="headerlink" title="搭建服务端"></a>搭建服务端</h2><p>服务端我们可以免费的在<a href="https://www.minecraft.net/en-us/download/server/bedrock/" target="_blank" rel="noopener">官方网站</a>下载，目前只支持Windows与Ubuntu版本。在Windows上运行推荐使用Windows10/Windows Server 2016及以后的版本。</p><p><img src="./images/Minecraft-bedrock%E6%9C%8D%E5%8A%A1%E7%AB%AF/4100402335.png" srcset="/defect/images/img/loading.gif" alt="2019-05-13T05:16:24.png"></p><p>Windows版本与Ubuntu版本的文件几乎差不多，下载后直接解压，我们就能够看到一个可执行的<code>bedrock_server.exe</code>文件。当没有任何需求时，直接执行它就可以启动并正常使用服务端了。</p><p>启动后我们可以看到一个类似这样的命令提示符的界面：</p><p><img src="./images/Minecraft-bedrock%E6%9C%8D%E5%8A%A1%E7%AB%AF/3200057918.png" srcset="/defect/images/img/loading.gif" alt="2019-05-15T13:18:43.png"></p><p>此时的服务器端就已经启动完成了，若能直接访问服务器，就可以直接开始游戏了🥓。</p><p><em>需要使用在Windows商店下载的Minecarft作为客户端</em></p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>当然，默认的配置文件往往大多数时间都是不能满足我们的需求的。还有很多种情况需要我们根据自己的想法去自定义。例如修改个监听的端口。</p><p>目前的Bedrock服务端也有个较为完善的配置文件，可读性也非常的高。官方下载的包里不仅有个“How to”，并且配置文件内都有着很详细的注释，例如修改游戏模式：</p><pre><code>gamemode=survival# Sets the game mode for new players.# Allowed values: &quot;survival&quot;, &quot;creative&quot;, or &quot;adventure&quot;</code></pre><p>配置文件的修改入门很低，只要能打开几乎针对服务器的一些选项都可以自定义。除此之外，我们还可以在服务器允许中的命令行/shell内直接使用一些命令，例如提出某个在线的玩家：</p><pre><code>kick &lt;player name or xuid&gt; &lt;reason&gt;</code></pre><p>或者是关闭服务器：</p><pre><code>stop</code></pre><p><em>当然你喜欢的话也可以直接终止这个进程，当然不推荐这么做。</em></p><p>压缩包内的“bedrock_server_how_to.html”写的非常的详细，功能也非常的全。对于一些日常的使用，或者是入门的话，可以多参考参考该文件。</p><p>为了方便，我还放了个在线版本的<a href="https://www.defectink.com/defect/bedrock_server_how_to.html" target="_blank" rel="noopener">📢bedrock_server_how_to</a>。是当前最新的1.11.2.1版本的，后续可能不会持续更新。当前写的非常的详细了。</p><h3 id="权限级别"><a href="#权限级别" class="headerlink" title="权限级别"></a>权限级别</h3><p>配置文件可以修改大多数服务端的配置，主要是针对游戏服务器的修改。像是对于游戏内的具体修改并没有写在配置文件内，例如对玩家的修改以及修改世界的选项。这些操作选项需要我们手动赋予一个玩家“操作员”的权限，这样，该玩家就会有对目前游戏的整个世界的完整操作权限。</p><p><img src="./images/Minecraft-bedrock%E6%9C%8D%E5%8A%A1%E7%AB%AF/2032314932.png" srcset="/defect/images/img/loading.gif" alt="2019-05-15T15:27:50.png"></p><p>在游戏的目录下有个名为<code>permissions.json</code>的json文件，在默认情况下它是空的，我们可以根据帮助文件提供的格式直接赋予某个玩家权限：</p><pre><code>[    {        &quot;permission&quot;: &quot;operator&quot;,        &quot;xuid&quot;: &quot;451298348&quot;    }]</code></pre><p><em>需要注意的是，我们需要对应的玩家的<code>xuid</code>值，这在玩家连接时会显示在终端上。</em></p><p>一次赋予多个玩家的格式：</p><pre><code>[    {        &quot;permission&quot;: &quot;operator&quot;,        &quot;xuid&quot;: &quot;451298348&quot;    },    {        &quot;permission&quot;: &quot;member&quot;,        &quot;xuid&quot;: &quot;52819329&quot;    },    {        &quot;permission&quot;: &quot;visitor&quot;,        &quot;xuid&quot;: &quot;234114123&quot;    }]</code></pre><p>当玩家被赋予<code>operator</code>的权限时，重启服务端，再次进入游戏时该玩家就拥有了对世界的完整控制。</p><p><em>某些世界生成后就不能修改的选项除外</em></p><h2 id="备份世界"><a href="#备份世界" class="headerlink" title="备份世界"></a>备份世界</h2><p>最简单也是最直接的备份方式就是直接备份当前服务端的整个文件夹，如果这个操作太过于麻烦的话，或者说文件夹已经达到了臃肿的地步了。我们可以使用预留的备份命令，可以生成<code>.db</code>的文件用于copy。文档的详细解释：</p><table><thead><tr><th>Command</th><th>Description</th></tr></thead><tbody><tr><td>save hold</td><td>This will ask the server to prepare for a backup. It’s asynchronous and will return immediately.</td></tr><tr><td>save query</td><td>After calling <code>save hold</code> you should call this command repeatedly to see if the preparation has finished. When it returns a success it will return a file list (with lengths for each file) of the files you need to copy. The server will not pause while this is happening, so some files can be modified while the backup is taking place. As long as you only copy the files in the given file list and truncate the copied files to the specified lengths, then the backup should be valid.</td></tr><tr><td>save resume</td><td>When you’re finished with copying the files you should call this to tell the server that it’s okay to remove old files again.</td></tr></tbody></table><p>我们可以直接使用<code>save hold</code>来生成备份文件，然后再使用<code>save query</code>来查询文件的位置。<em>注意：当我们的世界名称使用中文时，可能会出现在终端中文乱码的情况</em>，例如：</p><p><img src="./images/Minecraft-bedrock%E6%9C%8D%E5%8A%A1%E7%AB%AF/1339714059.png" srcset="/defect/images/img/loading.gif" alt="2019-05-15T15:50:09.png"></p><p>此时最佳解决办法就是换个世界名称。但是直接在配置文件中更换名称后，会导致重新创建一个新的世界。为了避免这个现象，达到给旧世界更换名称的操作。我们需要同时修改三个地方的名称，并保持一致：</p><ul><li><code>server.properties</code>文件内的名称</li><li><code>world</code>文件夹内的世界文件夹名称</li><li>世界文件夹内的<code>levelname.txt</code>内的文字</li></ul><p>当这三处名称统一修改时，再重新启动服务器就会达到修改世界名称的效果了。</p><p>目前推荐的最佳的备份方法就是直接备份<code>world</code>文件夹的所有内容，在服务器运行时对文件夹进行复制操作不会影响服务器的正常运行。</p><h2 id="网易代理"><a href="#网易代理" class="headerlink" title="网易代理"></a>网易代理</h2><p>网易代理的Minecraft对游戏的本质来说或许没有太多的不同，对于收费模式也是符合目前国内的游戏较为普遍的免费进入游戏，后续再根据自己的选择购买一些增值服务。也就是非买断制。但是网易拥有租赁服务器的服务，可能是想方便提供给玩家们一个更加方便的购买与启用服务器的渠道，但是他直接禁止使用其他的第三方服务器。对于某些玩家来说可能不是个好的选择。</p><p>虽然微软在Xbox上也有这类似的操作，但是Windows商店的Minecraft也不是天价，对于不想玩个mc就把身份证给网易的小伙伴们，Windows商店可能是个更好的选择。</p>]]></content>
    
    
    <categories>
      
      <category>实践</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Minecraft</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使typecho支持emoji🎈</title>
    <link href="//defect/make-typecho-support-the-emoji.html"/>
    <url>//defect/make-typecho-support-the-emoji.html</url>
    
    <content type="html"><![CDATA[<h2 id="Emoji？"><a href="#Emoji？" class="headerlink" title="Emoji？"></a>Emoji？</h2><p>emoji是我们身边常见的且神奇的表情符号，它被称为绘文字（えもじ <em>emoji</em>）。最初是日本在无线通信中所使用的视觉情感符号。与我们常发的表情包不同的是，它并不是图片。</p><p>Emoji的编码是Unicode字符集中的一部分，特定形象的Emoji表情符号对应到特定的Unicode字节。也就是说emoji是unicode编码。好处是无论在什么地方使用都不像是图片那么难处理，以及可以直接写在数据库内。</p><p><img src="./images/%E4%BD%BFtypecho%E6%94%AF%E6%8C%81emoji/2721696195.png" srcset="/defect/images/img/loading.gif" alt="emoji_unicode.png"></p><h3 id="词语发音"><a href="#词语发音" class="headerlink" title="词语发音"></a>词语发音</h3><p>絵文字/えもじ（emoji）的发音是 /emoꜜdʑi/（此处为国际音标）。 <a href="./images/使typecho支持emoji/1431864746.png">2</a></p><ul><li>/e/：即汉语拼音 y<strong>e</strong>中<strong>ê</strong>的发音，英语单词 b<strong>e</strong>d 中<strong>e</strong>的发音。</li><li>/dʑ/：与汉语拼音 j 对应的浊音。与潮州话拼音方案的 r 相似，如潮州话“字”（ri⁷）字的声母。 <a href="./images/使typecho支持emoji/175217384.png">3</a></li><li>/mo/ 为重读音节。</li></ul><p>在英语中，emoji 常被读作 /ɪˈmoʊdʒi/。</p><h2 id="在typecho中使用emoji"><a href="#在typecho中使用emoji" class="headerlink" title="在typecho中使用emoji"></a>在typecho中使用emoji</h2><p>现在多数的软件、网站等都已经广泛的支持emoji表情了。自己也是非常的喜欢这类表情，特别喜欢微软家的，那种扁平的风格真的很招人喜爱。</p><p><img src="./images/%E4%BD%BFtypecho%E6%94%AF%E6%8C%81emoji/1431864746.png" srcset="/defect/images/img/loading.gif" alt="1557663679707.png"></p><p>但是最近使用typecho的时候遇到点小问题，发现新安装的typecho居然不支持使用emoji。在文章等页面使用了emoji之后，保存会提示数据库查询错误。</p><p>这是因为数据库默认使用的是<code>utf8</code>编码，在<code>utf8</code>的编码中最多只支持3个字节，而我们可爱的emoji是4个字节，如上述所说的，emoji并非图片，是直接存储在数据库内的。所以就出现了数据库查询错误导致无法使用emoji的问题。</p><h3 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h3><p>解决办法也非常的简单，我们直接使用phpMyAdmin或者sql，修改数据库<code>charset</code>为<code>utf8mb4</code>就ok了</p><pre><code>alter table typecho_comments convert to character set utf8mb4 collate utf8mb4_unicode_ci;alter table typecho_contents convert to character set utf8mb4 collate utf8mb4_unicode_ci;alter table typecho_fields convert to character set utf8mb4 collate utf8mb4_unicode_ci;alter table typecho_metas convert to character set utf8mb4 collate utf8mb4_unicode_ci;alter table typecho_options convert to character set utf8mb4 collate utf8mb4_unicode_ci;alter table typecho_relationships convert to character set utf8mb4 collate utf8mb4_unicode_ci;alter table typecho_users convert to character set utf8mb4 collate utf8mb4_unicode_ci;</code></pre><p>如果有没有涉及的表，按照同样的语句修改就可以了。</p><p>修改后就可以看到表的‘排序规则’(charset)为可以使用emoji的<code>utf8mb4</code>了。</p><p><img src="./images/%E4%BD%BFtypecho%E6%94%AF%E6%8C%81emoji/175217384.png" srcset="/defect/images/img/loading.gif" alt="2019-05-12T12:27:33.png"></p><h3 id="修改typecho配置文件"><a href="#修改typecho配置文件" class="headerlink" title="修改typecho配置文件"></a>修改typecho配置文件</h3><p>当数据库修改完成之后，到typecho的目录下找到其配置文件<code>config.inc.php</code>。并且修改为刚刚设置编码就ok了</p><pre><code>$db-&gt;addServer(array (    &#39;host&#39;      =&gt;  localhost,    &#39;user&#39;      =&gt;  &#39;root&#39;,    &#39;password&#39;  =&gt;  &#39;my_password&#39;,    &#39;charset&#39;   =&gt;  &#39;utf8mb4&#39;, //修改这一行    &#39;port&#39;      =&gt;  3306,    &#39;database&#39;  =&gt;  &#39;喵喵喵&#39;)</code></pre><p>全部修改完成后就能正常的在typecho中使用emoji了</p><p><img src="./images/%E4%BD%BFtypecho%E6%94%AF%E6%8C%81emoji/4188132525.png" srcset="/defect/images/img/loading.gif" alt="2019-05-12T12:31:18.png"></p>]]></content>
    
    
    <categories>
      
      <category>实践</category>
      
    </categories>
    
    
    <tags>
      
      <tag>typecho</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="//defect/hello-world.html"/>
    <url>//defect/hello-world.html</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
