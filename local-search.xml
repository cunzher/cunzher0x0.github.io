<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>自动备份大法</title>
    <link href="//defect/auto-backup.html"/>
    <url>//defect/auto-backup.html</url>
    
    <content type="html"><![CDATA[<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>最近看到几个数据爆炸的可怕事件，虽然我平时偶尔有手动备份的，但还是不怎么放心。以前有用过lsyncd自动同步到其他机器。但昨天发生了一个更可怕的事情，我重启机器后发现mysql启动不了，apt也不能update了。当时就蒙了，后来发现是我的/var目录满了。mysql与apt都需要用到/var目录，所以爆炸了。但是为什么会满呢…</p><p>因为一个lsyncd的日志写了34GB。</p><p><img src="./images/%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD%E5%A4%A7%E6%B3%95/2874899693.png" srcset="/defect/images/img/loading.gif" alt="1.png/"></p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>放弃lsyncd。</p><p>以前因为懒，写过一个自动压缩网页根目录的脚本，配合crontab在每天的凌晨自动执行一遍非常不错。</p><p>但是最重要的不是根目录，而是数据库。最近有了解到mysqldump，表示可以crontab一下。</p><h3 id="dump为sql文件"><a href="#dump为sql文件" class="headerlink" title="dump为sql文件"></a>dump为sql文件</h3><p>导出整个数据库：</p><pre><code>mysqldump -u 用户名 -p 数据库名 &gt; 导出的文件名</code></pre><p>例：</p><pre><code>mysqldump -u root -p typecho &gt; typecho_backup.sql</code></pre><p>导出一个表</p><pre><code>mysqldump -u 用户名 -p 数据库名 表名&gt; 导出的文件名</code></pre><p>例：</p><pre><code>mysqldump -u root -p typecho users &gt; users_backup.sql</code></pre><p>导出一个数据库结构</p><pre><code>mysqldump -u 用户名 -p -d 数据库名 &gt; 导出的文件名</code></pre><p>例：</p><pre><code>mysqldump -u root -p -d typecho &gt;  typecho.sql</code></pre><h3 id="导入数据库"><a href="#导入数据库" class="headerlink" title="导入数据库"></a>导入数据库</h3><pre><code>mysql -u 用户名 -p 数据库名 &lt; 数据库名.sql</code></pre><p>例：</p><pre><code>mysql -u root -p typecho &lt; typecho.sql</code></pre><p>实际操作了一下，确实很简单方便好用。但问题是，对于我这种勤(lan)快的人肯定要脚本自动一体化啊。</p><h3 id="感觉很厉害的Script"><a href="#感觉很厉害的Script" class="headerlink" title="感觉很厉害的Script"></a>感觉很厉害的Script</h3><p>自我感觉，自我感觉。</p><pre><code class="bash">#!/bin/bash#定义数据库信息USER=&quot;root&quot;PASS=&quot;password&quot;HOST=&quot;localhost&quot;NAME=&quot;typecho&quot;NAME2=&quot;wordpress&quot;#其他信息BAK_DIR=&quot;/root/backup/&quot;TIME=`date +%F`#操作mysqldump -u$USER -p$PASS -h$HOST $NAME &gt; $NAME&quot;_&quot;$TIME.sqlmysqldump -u$USER -p$PASS -h$HOST $NAME2 &gt; $NAME2&quot;_&quot;$TIME.sql#压缩并移动#tar -zPcvf /root/backup/tar.gz/sql/$NAME&quot;_&quot;$TIME.tar.gz /root/backup/$NAME&quot;_&quot;$TIME.sql#tar -zPcvf /root/backup/tar.gz/sql/$NAME2&quot;_&quot;$TIME.tar.gz /root/backup/$NAME2&quot;_&quot;$TIME.sql#删除多余文件rm -rf /root/backup/$NAME&quot;_&quot;$TIME.sql /root/backup/$NAME2&quot;_&quot;$TIME.sqlrm -rf /root/$NAME&quot;_&quot;$TIME.sql /root/$NAME2&quot;_&quot;$TIME.sql#删除三天前的数据find /root/backup/tar.gz/sql -mtime +3 -name &quot;*.*&quot; -exec rm -rf {} \;</code></pre><p>只要将其放到crontab中，并按时间进行执行。就能实现完美的sql备份了。</p><p>再加上以前写过的一些备份其他文件的Shell Script，就能实现最基本的收据备份了。并且七牛的云储存有个在Linux上的下载备份脚本。正好给了我不小的帮助。</p><p>（虽然喜欢写交互式的脚本，但是只要将命令挑出来放crontab就好了）</p><h3 id="写入crontab"><a href="#写入crontab" class="headerlink" title="写入crontab"></a>写入crontab</h3><p>先来简单的介绍下可爱的crontab文件的时间格式吧。</p><p><img src="./images/%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD%E5%A4%A7%E6%B3%95/4160640759.png" srcset="/defect/images/img/loading.gif" alt="2.png/"></p><p>星号（*）：代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。</p><p>逗号（,）：可以用逗号隔开的值指定一个列表范围，例如，“1,2,5,7,8,9”</p><p>中杠（-）：可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6”</p><p>正斜线（/）：可以用正斜线指定时间的间隔频率，例如“0-23/2”表示每两小时执行一次。同时正斜线可以和星号一起使用，例如*/10，如果用在minute字段，表示每十分钟执行一次。</p><p>然后就是写到Crontab里去了。第一次我也是以为直接找到并编辑crontab这个文件的，后来才发现，原来人家有编辑的命令的：</p><pre><code>crontab -e</code></pre><p>然后按照格式讲我们的脚本写进去就好了。</p><pre><code># m h  dom mon dow   comman0 5 * * * /bin/sh /root/backup/c.sh0 4 * * * /bin/sh /root/backup/d.sh</code></pre><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>进过超级简单的操作再配合定时任务，就能实现自动化的各种各样的操作了。对于备份这种操作，手动来做的话迟早会累死，就是不累也会感觉到烦。所以将其运用到定时任务上就是非常的人性化了。主要是方便，不需要任何的人工参与。</p><p>对于数据这方面的，还是经常性的备份比较重要。不光光是不本机的备份，也要经常性的实施多机备份。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="//defect/hello-world.html"/>
    <url>//defect/hello-world.html</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
